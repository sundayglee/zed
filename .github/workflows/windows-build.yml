name: Windows Build

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Branch / tag / SHA to build (default: main)
        required: false
        default: main

env:                       # ── Rust lives on D:  ───────────────────────────
  CARGO_HOME:  D:\cargo
  RUSTUP_HOME: D:\rustup
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Windows – Clippy & tests
    runs-on: windows-latest

    steps:
      # --- prepare D: drive -------------------------------------------------
      - name: Prepare Rust dirs on D:
        shell: pwsh
        run: |
          New-Item -Path "$env:CARGO_HOME"  -ItemType Directory -Force
          New-Item -Path "$env:RUSTUP_HOME" -ItemType Directory -Force
          # add cargo\bin to PATH for the rest of the job
          "$env:CARGO_HOME\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Install Rust (stable + clippy)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy

      - name: Run clippy
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: Run tests
        run: cargo test --workspace --all-features

  bundle:
    name: Build EXE installer
    needs: test
    runs-on: windows-latest

    steps:
      # --- same D: preparation ---------------------------------------------
      - name: Prepare Rust dirs on D:
        shell: pwsh
        run: |
          New-Item -Path "$env:CARGO_HOME"  -ItemType Directory -Force
          New-Item -Path "$env:RUSTUP_HOME" -ItemType Directory -Force
          "$env:CARGO_HOME\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Enable long paths
        run: git config --system core.longpaths true

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Build release executable
        run: cargo build --release --package zed

      - name: Install Inno Setup 6 via Chocolatey
        uses: crazy-max/ghaction-chocolatey@v4
        with:
          args: install innosetup

      # if you already generate zed.iss elsewhere, drop this step
      - name: Create simple Inno Setup script
        shell: pwsh
        run: |
          @"
          [Setup]
          AppName=Zed
          AppVersion=0.0.0
          DefaultDirName={autopf}\Zed
          OutputBaseFilename=zed-windows-x86_64
          Compression=lzma
          SolidCompression=yes
          [Files]
          Source: "target\release\zed.exe"; DestDir: "{app}"
          [Icons]
          Name: "{autodesktop}\Zed"; Filename: "{app}\zed.exe"
          "@ | Set-Content zed.iss

      - name: Build EXE installer
        shell: pwsh
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" zed.iss

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: zed-windows-x86_64.exe
          path: Output/zed-windows-x86_64.exe
